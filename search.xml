<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据类型转换]]></title>
    <url>%2Fjava%E5%9F%BA%E7%A1%80%2F%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数据类型转换Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。当数据类型不一样时，将会发生数据类型转换。 自动类型转换（隐式） 1. 特点：代码不需要进行特殊处理，自动完成。 2. 规则：数据范围从小到大。 强制类型转换（显式） 12345678910111213141516171819202122232425public class DataType &#123; public static void main(String[] args) &#123; System.out.println(1024); // 这就是一个整数，默认就是int类型 System.out.println(3.14); // 这就是一个浮点数，默认就是double类型 // 左边是long类型，右边是默认的int类型，左右不一样 // 一个等号代表赋值，将右侧的int常量，交给左侧的long变量进行存储 // int --&gt; long，符合了数据范围从小到大的要求 // 这一行代码发生了自动类型转换。 long num1 = 100; System.out.println(num1); // 100 // 左边是double类型，右边是float类型，左右不一样 // float --&gt; double，符合从小到大的规则 // 也发生了自动类型转换 double num2 = 2.5F; System.out.println(num2); // 2.5 // 左边是float类型，右边是long类型，左右不一样 // long --&gt; float，范围是float更大一些，符合从小到大的规则 // 也发生了自动类型转换 float num3 = 30L; System.out.println(num3); // 30.0 &#125;&#125; 自动转换(隐式转换)一个 int 类型变量和一个 byte 类型变量进行加法运算， 结果会是什么数据类型？ 12345678public static void main(String[] args) &#123; int i = 1; byte b = 2; // byte x = b + i; // 报错 //int类型和byte类型运算，结果是int类型 int j = b + i; System.out.println(j);&#125; 运算结果，变量的类型将是 int 类型，这就是出现了数据类型的自动类型转换现象。·自动转换：将 取值范围小的类型 自动提升为 取值范围大的类型 。 转换原理图解byte 类型内存占有1个字节，在和 int 类型运算时会提升为 int 类型 ，自动补充3个字节，因此计算后的结果还是 int 类 型。同样道理，当一个 int 类型变量和一个 double 变量运算时， int 类型将会自动提升为 double 类型进行运算。 1234567public static void main(String[] args) &#123; int i = 1; double d = 2.5; //int类型和double类型运算，结果是double类型 //int类型会提升为double类型 double e = d+i; System.out.println(e);&#125; 转换规则范围小的类型向范围大的类型提升， byte、short、char 运算时直接提升为 int 。byte、short、char —&gt;int —&gt;long–&gt;float—&gt;double 强制转换(显示转换)强制类型转换 1. 特点：代码需要进行特殊的格式处理，不能自动完成。 2. 格式：范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据; 注意事项： 1. 强制类型转换一般不推荐使用，因为有可能发生精度损失、数据溢出。 2. byte/short/char这三种类型都可以发生数学运算，例如加法“+”. 3. byte/short/char这三种类型在运算的时候，都会被首先提升成为int类型，然后再计算。 4. boolean类型不能发生数据类型转换 1234567891011121314151617181920212223242526272829303132333435public class DataType &#123; public static void main(String[] args) &#123; // 左边是int类型，右边是long类型，不一样 // long --&gt; int，不是从小到大 // 不能发生自动类型转换！ // 格式：范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据; int num = (int) 100L; System.out.println(num); // long强制转换成为int类型 int num2 = (int) 6000000000L; System.out.println(num2); // 1705032704 // double --&gt; int，强制类型转换 int num3 = (int) 3.99; System.out.println(num3); // 3，这并不是四舍五入，所有的小数位都会被舍弃掉 char zifu1 = 'A'; // 这是一个字符型变量，里面是大写字母A System.out.println(zifu1 + 1); // 66，也就是大写字母A被当做65进行处理 // 计算机的底层会用一个数字（二进制）来代表字符A，就是65 // 一旦char类型进行了数学运算，那么字符就会按照一定的规则翻译成为一个数字 byte num4 = 40; // 注意！右侧的数值大小不能超过左侧的类型范围 byte num5 = 50; // byte + byte --&gt; int + int --&gt; int int result1 = num4 + num5; System.out.println(result1); // 90 short num6 = 60; // byte + short --&gt; int + int --&gt; int // int强制转换为short：注意必须保证逻辑上真实大小本来就没有超过short范围，否则会发生数据溢出 short result2 = (short) (num4 + num6); System.out.println(result2); // 100 &#125;&#125; 将 1.5 赋值到 int 类型变量会发生什么？产生编译失败，肯定无法赋值。 1int i = 1.5;//错误 double 类型内存8个字节， int 类型内存4个字节。 1.5 是 double 类型，取值范围大于 int 。可以理解为 double 是8 升的水壶， int 是4升的水壶，不能把大水壶中的水直接放进小水壶去。 想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值。·强制类型转换：将 取值范围大的类型 强制转换成 取值范围小的类型 。比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。转换格式： 1数据类型 变量名 = （数据类型）被转数据值; 将 1.5 赋值到 int 类型，代码修改为： 1int i = (int)1.5;//错误 同样道理，当一个 short 类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给short类型变量，就需要强制转换。 12345678910111213public static void main(String[] args) &#123; //short类型变量，内存中2个字节 short s = 1; /* 出现编译失败 s和1做运算的时候，1是int类型，s会被提升为int类型 s+1后的结果是int类型，将结果在赋值会short类型时发生错误 short内存2个字节，int类型4个字节 必须将int强制转成short才能完成赋值 */ s = s + 1；//编译失败 s = (short)(s+1);//编译成功&#125; 转换原理图解 ### 强烈注意 浮点转成整数，直接取消小数点，可能造成数据损失精度。 int 强制转成 short 砍掉2个字节，可能造成数据丢失。 1234// 定义s为short范围内最大值short s = 32767;// 运算后，强制转换，砍掉2个字节后会出现不确定的结果s = (short)(s + 10); ASCII编码表在计算机的内部都是二进制的0、1数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。·编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。将所有的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（American Standard Code for Information Interchange 美国标准信息交换码）。数字和字符的对照关系表（编码表）：·ASCII码表：American Standard Code for Information Interchange，美国信息交换标准代码。·Unicode码表：万国码。也是数字和符号的对照关系，开头0-127部分和ASCII完全一样，但是从128开始包含有更多字符。48 - ‘0’65 - ‘A’97 - ‘a’ 12345678910111213141516public static void main(String[] args) &#123; char zifu1 = '1'; System.out.println(zifu1 + 0); // 49 char zifu2 = 'A'; // 其实底层保存的是65数字 char zifu3 = 'c'; // 左侧是int类型，右边是char类型， // char --&gt; int，确实是从小到大 // 发生了自动类型转换 int num = zifu3; System.out.println(num); // 99 char zifu4 = '中'; // 正确写法 System.out.println(zifu4 + 0); // 20013 &#125; 12345public static void main(String[] args) &#123; //字符类型变量 char c = 'a'; int i = 1; //字符类型和int类型计算 System.out.println(c+i);//输出结果是98 &#125; 小贴士：在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到97，再和1求和，结果为98。char类型提升 为了int类型。char类型内存2个字节，int类型内存4个字节。]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常量与变量和数据类型]]></title>
    <url>%2Fjava%E5%9F%BA%E7%A1%80%2F%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[常量概述常量：是指在Java程序中固定不变的数据 分类 练习需求：输出各种类型的常量。 1234567891011121314 public class ConstantDemo &#123; public static void main(String[] args)&#123; //输出整数常量 System.out.println(123); //输出小数常量 System.out.println(0.125); //输出字符常量 System.out.println('A'); //输出布尔常量 System.out.println(true); //输出字符串常量 System.out.println("你好Java"); &#125;&#125; 变量和数据类型变量的概述变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。 数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可 以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。 数据类型数据类型分类-1 Java的数据类型分为两大类： 基本数据类型：包括 整数 、 浮点数 、 字符 、 布尔 。-2 引用数据类型：包括 类 、 数组 、 接口 。 基本数据类型四类八种基本数据类型： Java中的默认类型：整数类型是 int 、浮点类型是 double 。 变量的定义变量定义的格式包括三个要素： 数据类型 、 变量名 、 数据值 。格式 1数据类型 变量名 = 数据值; 练习定义所有基本数据类型的变量，代码如下： 12345678910111213141516171819202122232425262728public class Variable &#123; public static void main(String[] args)&#123; //定义字节型变量 byte b = 100; System.out.println(b); //定义短整型变量 short s = 1000; System.out.println(s); //定义整型变量 int i = 123456; System.out.println(i); //定义长整型变量 long l = 12345678900L; System.out.println(l); //定义单精度浮点型变量 float f = 5.5F; System.out.println(f); //定义双精度浮点型变量 double d = 8.5; System.out.println(d); //定义布尔型变量 boolean bool = false; System.out.println(bool); //定义字符型变量 char c = 'A'; System.out.println(c); &#125; &#125; long类型：建议数据后加L表示。ﬂoat类型：建议数据后加F表示。 注意事项变量名称：在同一个大括号范围内，变量的名字不可以相同。变量赋值：定义的变量，不赋值不能使用。]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld入门程序]]></title>
    <url>%2Fjava%E5%9F%BA%E7%A1%80%2FHelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[java程序开发步骤Java程序开发三步骤：编写、编译、运行。 编写Java源程序 在 d:\day01 目录下新建文本文件，完整的文件名修改为 HelloWorld.java ，其中文件名为 HelloWorld ，后 缀名必须为 .java 。 用记事本打开 使用notepad++记事本软件。 在文件中键入文本并保存，代码如下：12345public class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125; &#125; 文件名必须是 HelloWorld ，保证文件名和类的名字是一致的，注意大小写。每个字母和符号必须与示例代码一模一样。第一个 HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我 们必须将编写好的 Java源文件 编译成JVM可以看懂的 字节码文件 。 编译Java源文件在DOS命令行中，进入Java源文件的目录，使用 javac 命令进行编译。命令： 1javac Java源文件名.后缀名 举例： 1javac HelloWorld.java 编译成功后，命令行没有任何提示。打开 HelloWord.java根目录，发现产生了一个新的文件 HelloWorld.class ，该文件 就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。 运行Java程序在DOS命令行中，进入Java源文件的目录，使用 java 命令进行运行。命令： 1java 类名字 举例： 1java HelloWorld java HelloWord 不要写 不要写 不要写 .classJava源文件的编译工具 javac.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目 录下使用。 入门程序说明编译和运行是两回事编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们 所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。运行：是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。 关于main方法main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多 少程序，JVM在运行的时候，都会从main方法这里开始执行。 添加注释comment注释：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须 要的，它不影响程序的编译和运行。 Java中有单行注释和多行注释单行注释以 //开头 换行结束多行注释以 /开头 以/结束 关键字keywords关键字：是指在程序中，Java已经定义好的单词，具有特殊含义。HelloWorld案例中，出现的关键字有 public 、 class 、 static 、 void 等，这些单词已经被 Java定义好，全部都是小写字母，notepad++中颜色特殊。关键字比较多，不能死记硬背，学到哪里记到哪里即可。 标识符标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。HelloWorld案例中，出现的标识符有类名字 HelloWorld 。命名规则： 硬性要求 标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _（下划线） 。 标识符不能以数字开头。 标识符不能是关键字。 命名规范： 软性建议类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。 方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。 变量名规范：全部小写。]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式内容概述]]></title>
    <url>%2Fjava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%86%85%E5%AE%B9%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[设计模式的重要性1) 软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现） 的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人 在1990年代从建筑设计领域引入到计算机科学的2) 大厦 VS 简易房 （大工程和小工程）3) 拿实际工作经历来说, 当一个项目开发完后，如果客户提出增新功能，怎么办?。（可扩展性，使用设计模式具有很好的扩展性）4) 如果项目开发完后，原来程序员离职，你接手维护该项目怎么办? (维护性[可读性、 规范性])5) 目前程序员门槛越来越高，一线IT公司(大厂)，都会问你在实际项目中使用过什么 设计模式，怎样使用的，解决了什么问题。6) 设计模式在软件中哪里？面向对象(oo)=&gt;功能模块[设计模式+算法(数据结构)]=&gt;框 架[使用到多种设计模式]=&gt;架构 [服务器集群]7) 如果想成为合格软件工程师，那就花时间来研究下设计模式是非常必要的. 设计模式的目的]]></content>
      <categories>
        <category>java设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[队列]]></title>
    <url>%2Fjava%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%2F%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[队列介绍1）队列是一个有序列表，可以用数组或是链表来实现。2）遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出3）示意图：(使用数组模拟队列示意图)数组模拟队列队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数组的声明如下图, 其中 maxSize 是该队列的最大容量。因为队列的输出、输入是分别从前后端来处理，因此需要两个变量 front及 rear分别记录队列前后端的下标，front 会随着数据输出而改变，而 rear则是随着数据输入而改变，如图所示:当我们将数据存入队列时称为”addQueue”，addQueue 的处理需要有两个步骤：思路分析1）将尾指针往后移：rear+1 , 当front == rear 【空】2）若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear所指的数组元素中，否则无法存入数据。 rear == maxSize - 1[队列满] 代码实现12345class ArrayQueue(arrMaxSize: Int) &#123; val maxSize: Int = arrMaxSize val array = new Array[Int](arrMaxSize) var front: Int = -1 var rear: Int = -1&#125;]]></content>
      <categories>
        <category>java数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[稀疏数组]]></title>
    <url>%2Fjava%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%2F%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[稀疏数组先看一个实际的需求编写的五子棋程序中，有存盘退出和续上盘的功能。分析问题:因为该二维数组的很多值是默认值0, 因此记录了很多没有意义的数据.-&gt;稀疏数组。 稀疏数组介绍基本介绍当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。稀疏数组的处理方法是:1）记录数组一共有几行几列，有多少个不同的值2）把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模 稀疏数组举例说明 应用实例1）使用稀疏数组，来保留类似前面的二维数组(棋盘、地图等等)2）把稀疏数组存盘，并且可以从新恢复原来的二维数组数3）整体思路分析 二维数组和稀疏数组相互转化二维数组 转 稀疏数组的思路 遍历 原始的二维数组，得到有效数据的个数 sum 根据sum 就可以创建 稀疏数组 sparseArr int[sum + 1] [3] 将二维数组的有效数据数据存入到 稀疏数组 稀疏数组转原始的二维数组的思路 先读取稀疏数组的第一行，根据第一行的数据，创建原始的二维数组，比如上面的 chessArr2 = int [11][11] 在读取稀疏数组后几行的数据，并赋给 原始的二维数组 即可. 代码实现1234567891011121314151617181920212223242526272829//将二位数组转化成稀疏数组 public static int[][] parseSparseArray(int[][] array)&#123; //sum用来记录有几个非0值 int sum = 0; for (int i = 0; i &lt; array.length; i++) &#123; for (int j = 0; j &lt; array.length; j++) &#123; if (array[i][j]!=0)&#123; sum ++; &#125; &#125; &#125; int[][] sparseArray = new int[sum+1][3]; sparseArray[0][0] = array.length; sparseArray[0][1] = array[0].length; sparseArray[0][2] = sum; //count用来记录是稀疏数组的哪一行 int count = 0; for (int i = 0; i &lt; array.length; i++) &#123; for (int j = 0; j &lt; array.length; j++) &#123; if (array[i][j]!=0)&#123; count++; sparseArray[count][0] = i; sparseArray[count][1] = j; sparseArray[count][2] = array[i][j]; &#125; &#125; &#125; return sparseArray; &#125; 123456789//将稀疏数组转化为二维数组 public static int[][] toArray(int[][] sparseArray)&#123; int[][] array = new int[sparseArray[0][0]][sparseArray[0][1]]; //更改二位数组中应该非0的值 for (int i = 1; i &lt; sparseArray.length; i++) &#123; array[sparseArray[i][0]][sparseArray[i][1]] = sparseArray[i][2]; &#125; return array; &#125;]]></content>
      <categories>
        <category>java数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>稀疏数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构和算法的关系]]></title>
    <url>%2Fjava%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B3%E7%B3%BB%2F</url>
    <content type="text"><![CDATA[数据结构和算法的关系1）数据data结构(structure)是一门研究组织数据方式的学科，有了编程语言也就有了数据结构.学好数据结构可以编写出更加漂亮,更加有效率的代码。2）要学习好数据结构就要多多考虑如何将生活中遇到的问题,用程序去实现解决.3）程序 = 数据结构 + 算法4）数据结构是算法的基础, 换言之，想要学好算法，需要把数据结构学到位。 线性结构和非线性结构数据结构包括：线性结构和非线性结构。 线性结构1）线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系。2）线性结构有两种不同的存储结构，即顺序存储结构和链式存储结构。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的。3）链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息。4）线性结构常见的有：数组、队列、链表和栈。 非线性结构非线性结构包括：二维数组，多维数组，广义表，树结构，图结构]]></content>
      <categories>
        <category>java数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Funcategorized%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[计算机基础知识]]></title>
    <url>%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[二进制 计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机全部采用二进制数表示，它只包含0、1两个数，逢二进一，1+1=10。每一个0或者每一个1，叫做一个bit（比特，位）。十进制转换二进制 除以2 取余 反向读二进制转换十进制 从右往左数字乘以2^0 + 数字乘以2^1 + … + 数字乘以2^n 字节字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都以字节的形式存储，右键文件属性，我们可以直接查看文件的字节大小。8个bit（二进制位）0000-0000表示为1个字节，写成1byte或者1B。·8bit = 1Byte·1024B = 1KB·1024MB = 1GB·1024GB = 1TB 常见DOS命令MS-DOS(Microsoft Disk Operating System)微软磁盘操作系统cmd(命令提示符)启动：Win+R 》》输入cmd回车x: 切换到盘符xcd + 路径跳转到目录（tab键可以自动补全路径）cd ..返回上一级目录cd \ 返回根目录dir 显示文件夹中的所有文件信息cls 清屏exit 退出cmd]]></content>
      <categories>
        <category>计算机基础知识</category>
      </categories>
      <tags>
        <tag>进制</tag>
        <tag>计算机常识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java环境搭建]]></title>
    <url>%2Fjava%E5%9F%BA%E7%A1%80%2Fjava%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[java虚拟机—–JVM·JVM(Java Vrtual Mechine)：java虚拟机，简称JVM.是运行所有java程序的假想计算机，是java程序的运行环境，是java最具有吸引力 特性之一。我们编写的代码，都运行在JVM之上。·跨平台：任何软件的运行，都必须要运行在操作系统上，而我们用java编写的软件可以运行在任何的操作系统上，这个特性称为java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。 JRE和JDK·JRE(Java Runtime Environment)：是java程序的运行时环境，包含JVM和运行时所需要的核心类库。·JDK(Java Development Kit)：是java程序开发工具包，包含JRE和开发人员使用的工具。我们想要运行已有的一个java程序，那么只需安装JRE即可。我们想要开发一个全新的java程序，那么必须安装JDK。 下载安装JDK（以JDK1.8为例子，因为该版本使用量较大） Oracle首页 选择jdk1.8版本下载 点击Download 先勾选接受 后选择符合你系统的版本 最后登录Oracle账号就会自动下载了，没有账号的可以百度搜索一个。 双击下载好的jdk就可以安装 jdk中包含JRE不需要额外在安装一个独立的JRE 安装路径最好不要有中文和空格，一定要记住你的安装路径！！！！！！！！！！！后面会用到 安装完毕后 右键此电脑==》属性 按图中标号依次点击 按图中标号依次点击，最后选择你的jdk根目录 按图中标号依次点击和输入 打开命令提示符，输入红框中的内容，与图一致则完成配置]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
